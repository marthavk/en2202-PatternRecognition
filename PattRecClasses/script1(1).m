%% Example: Define and use a simple infinite-duration HMM
mc = MarkovChain([0.5; 0.5], [0.9 0.1; 0.05 0.95]); %State generator
g1 = GaussD('Mean', 0, 'StDev', 1); %Distribution for state=1
g2 = GaussD('Mean', 2, 'StDev', 3); %Distribution for state=2
h = HMM(mc, [g1;g2]);  %The HMM
x = rand(h, 100); %Generate an output sequence

%% Verify the MarkovChain and HMM Sources
clc;
clear all;
q=[0.75 0.25];
A=[0.99 0.01; 0.03 0.97];
b1 = GaussD('Mean', 0, 'StDev', 1);
b2 = GaussD('Mean', 3, 'StDev', 2);
B=[b1, b2];
h=HMM;
mc = MarkovChain;
mc.InitialProb = q;
mc.TransitionProb = A;
h.StateGen = mc;
h.OutputDistr = B;

%% 2 generate 10000 state integer numbers from the test Markov chain. 
T=10000;
Sequence = rand(mc, T);
ps1 = sum(Sequence==1)/T
ps2 = sum(Sequence==2)/T

%% 3
% expected E[X]=0.75
% expected Var[X]=3.4375
T=10000;
[X,S] = rand(h,T);
mu = mean(X)
sigma = var(X)

%% 4 
T=500;
[X,S] = rand(h,T);
time = linspace(1,T,T);
figure;
for i=1:9
    [X,S] = rand(h,T);
    subplot(3,3,i);
    plot(time,X);
end

%% 5
h2 = HMM;
h2.StateGen = mc;
b3 = GaussD('Mean', 0, 'StDev', 2);
B2 = [b1 b3];
h2.OutputDistr = B2;

T=500;
[X,S] = rand(h,T);
time = linspace(1,T,T);
figure;
for i=1:9
    [X,S] = rand(h2,T);
    subplot(3,3,i);
    plot(time,X);
end

%% 6 Check finite duration HMM

%Declare initial and transition matrices
q=[0.75 0.20 0.05];
A=[0.5 0.3 0.2; 0.6 0.3 0.1];
b1 = GaussD('Mean', 0, 'StDev', 1);
b2 = GaussD('Mean', 3, 'StDev', 2);
B=[b1, b2];

%Create the Markov Chain
mc = MarkovChain;
mc.InitialProb = q;
mc.TransitionProb = A;

%Create the HMM
h3 = HMM(mc, B);

%Generate the Sequence
T=10000;
Sequence = rand(mc, T);

%% 7 Check random vectors generated by the state-conditional output distributions
h4 = HMM;
b1 = GaussD('Mean', 0, 'StDev', 1);
b2 = GaussD('Mean', 3, 'StDev', 2);
q=[0.75 0.25];
A=[0.99 0.01; 0.03 0.97];
B=[rand(b1,10); rand(b2,10)];
mc = MarkovChain;
mc.InitialProb = q;
mc.TransitionProb = A;
h4.Stat

%% Verify use of vector?valued output distributions
clc;
clear all;

%Declare initial and transition matrices
init = [0.75; 0.25];
A = [0.99 0.01; 0.03 0.97];
d=10; %length of vectors
mc = MarkovChain(init, A);

% Declare mean values and covariance matrices
mu1 = 0;
mu2 = 3;
Sigma1 = diag(rand(1,d));

%At least one of the output distributions should have a non-diagonal 
%covariance matrix so we will create a symmetric one
S = rand(d);
Sigma2 = S + S';

% distribution for state 1
g1 = GaussD('Mean', mu1 + 1.5*randn(1,d), 'Covariance', Sigma1);
% distribution for state 2
g2 = GaussD('Mean', mu2 + 1.5*randn(1,d) , 'Covariance', Sigma2);

h4 = HMM(mc, [g1; g2]); 
X = h4.rand(10000); 


